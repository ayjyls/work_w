 软件可靠性:在规定条件下,在规定时间内,软件不引起系统失效的概率。该概率是系统输入和系统使用的函数,也是软件中存在故障的函数,系统输入将确定是否会遇到存在的故障。根据国家标准GB-6583的规定，环境可靠性是指：产品在规定的条件下、在规定的时间内完成规定的功能的能力。对产品而言，可靠性越高就越好。可靠性高的产品，可以长时间正常工作（这正是所有消费者需要得到的）；从专业术语上来说，就是产品的可靠性越高，产品可以无故障工作的时间就越长。
可靠性包含了耐久性、可维修性、设计可靠性三大要素。
耐久性：产品使用无故障性或使用寿命长就是耐久性。例如，当空间探测卫星发射后，人们希望它能无故障的长时间工作，否则，它的存在就没有太多的意义了，但从某一个角度来说，任何产品不可能100%的不会发生故障。
可维修性：当产品发生故障后，能够很快很容易的通过维护或维修排除故障，就是可维修性。像自行车、电脑等都是容易维修的，而且维修成本也不高，很快的能够排除故障，这些都是事后维护或者维修。而像飞机、汽车都是价格很高而且非常注重安全可靠性的要求，这一般通过日常的维护和保养，来大大延长它的使用寿命，这是预防维修。产品的可维修性与产品的结构有很大的关系，即与设计可靠性有关。
设计可靠性：这是决定产品质量的关键，由于人――机系统的复杂性，以及人在操作中可能存在的差错和操作使用环境的这种因素影响，发生错误的可能性依然存在，所以设计的时候必须充分考虑产品的易使用性和易操作性，这就是设计可靠性。一般来说，产品的越容易操作，发生人为失误或其他问题造成的故障和安全问题的可能性就越小；从另一个角度来说，如果发生了故障或者安全性问题，采取必要的措施和预防措施就非常重要。例如汽车发生了碰撞后，有气囊保护。


系统的可维护性是衡量一个系统的可修复(恢复)性和可改进性的难易程度。实际上也是对系统性能的一种不可缺少的评价体系，它主要包括两个方面：首先是评价一个系统在实施预防型和纠正型维护功能时的难易程度，其中包括对故障的检测、诊断、修复以及能否将该系统重新进行初始化等功能；其次，则是衡量一个系统能接受改进，甚至为了进一步适应外界(或新的)环境而进行功能修改的难易程度。
所谓软件的可维护性其实说简单了就是软件代码的可被修改的容易程度。代码反复修改的情况不可避免，这种软件的不断演化过程――具体就是修正错误；适应新环境；满足新需求――虽然貌似将软件的功能变的越发强大，但是事实上这些改变总是或多或少的有悖于当初的设计初衷，因此势必慢慢的蚕食软件的基础架构和代码质量――造成的结果是让代码越来越难看懂，健壮性越来越脆弱，修改一个bug的代价越来越大。
软件的维护就是软件的再生。一个好的软件设计，必须能够允许新的设计要求以较为容易和平稳的方式加入到已有的系统中。但实际上，现有大多数软件系统不具备这样的特性。导致一个软件的可维护性较低的原因有四个：
        
1.过于僵硬（Rigidity）：很难在系统中加入新功能。因为会波及其它模块，最后会变成跨越几个模块的大改动。
        
2.过于脆弱（Fragility）：与过于僵硬同时存在。对一个地方的修改，往往导致看上去没有什么关系的另一个地方发生故障。修改完成前，系统的原始设计师甚至无法预测可能会波及到地方。
        
3.复用率低（Immobility）：当发现有一段代码、函数、模块可用于新功能时，这些已有的代码总是依赖一大堆其它的东西，很难将它们分开。
        
4.黏度过高（Viscosity）：对系统的改动可以采取保存原始设计意图和设计框架的方式，也可以以破坏原始意图和框架的方式进行。前者对系统未来有利，而后者是权宜之计，可以解决短期问题，但会牺牲中长期利益。如果一个系统设计，总是使得第二种办法比第一种容易，就叫黏度过高。
